#hashtags in beginning of a line means that the line will be ignored
#first column are memory addresses
#second column are values
#everything past the second column are just annotations
#WARNING: numbers are ALL in HEXADECIMAL

00 B0 JUMP
01 10 insert your code's starting address here

#memory mappings, see Chapter 2 slide 27
#write to these memory addresses to use the mapped functions
#these functions will treat their input as positive, not two's complement
02 00 mapped to turtle.forward
03 00 mapped to turtle.left
04 00 mapped to turtle.right
05 00 mapped to turtle.setheading
06 00 mapped to turtle.setx
07 00 mapped to turtle.sety
08 00 mapped to turtle.speed
09 00 mapped to turtle.pendown
0a 00 mapped to turtle.penup

#code goes here
#here is an example program, that draws a hexagon with length 20 sides

10 22 LOAD BIT PATTERN <- Example code beginning
11 14
12 21 LOAD BIT PATTERN
13 16 <- set return address before using hexagon function
14 B0 JUMP <- jump to hexagon function
15 EA
16 C0 HALT
17 00 <- Example code end



#HEXAGON FUNCTION, writes to registers C, D, E, and F
#arguments: register 1, register 2
#address: EA

#this function draws an hexagon then jumps to the address in register 01
#hexagon side length is determined by register 02
#set a register 1 to a return address then jump to EA to use this function

#init
EA 2C LOAD BIT PATTERN <- HEXAGON FUNCTION BEGINNING
EB FF
EC 2D LOAD BIT PATTERN
ED 06
EE 40 MOVE
EF 2E
F0 2F LOAD BIT PATTERN
F1 3c

#init loop counter
F2 5D ADD
F3 0D

#init return address
F4 31 STORE <- set return address
F5 F7

#loop
F6 BD JUMP <- beginning of loop
F7 00 <- return address goes here, (meant to be overwritten)

#loop body
#move turtle forward then turn
F8 3E STORE <- loop body
F9 02
FA 3F STORE
FB 04

#FF is in register C, which is -1 in two's complement 8 bits
FC 5D ADD <- decrement loop
FD CD
FE B0 JUMP <- jump back to beginning of loop
FF F6 <- HEXAGON FUNCTION END
