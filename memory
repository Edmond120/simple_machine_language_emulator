#hashtags in beginning of a line means that the line will be ignored
#first column are memory addresses
#second column are values
#everything past the second column are just annotations
#every undeclared memory cell by default is 0
#numbers are in hexadecimal

00 B0 JUMP
01 18 <- starting point of your code

#memory mappings
#write to these memory addresses to use the mapped functions
#these functions will treat their input as positive, not two's complement
02 00 mapped to turtle.forward
03 00 mapped to turtle.left
04 00 mapped to turtle.right
05 00 mapped to turtle.setheading
06 00 mapped to turtle.setx
07 00 mapped to turtle.sety
08 00 mapped to turtle.speed
09 00 mapped to turtle.pendown
0a 00 mapped to turtle.penup

#draws a hexagon with length 100 sides
#set address 01 to 10 to use

10 22 LOAD BIT PATTERN <- Example code beginning
11 64 <- hexagon side length
12 21 LOAD BIT PATTERN
13 16 <- set return address before using hexagon function
14 B0 JUMP
15 EA <- hexagon function address
16 C0 HALT
17 00 <- Example code end

18 27 LOAD BIT PATTERN
19 96 <- starting x position
1A 30 STORE
1B 0a
1C 37 STORE <- set init x position
1D 02
1E 30 STORE
1F 09
20 23 LOAD BIT PATTERN <- loop init
21 06 <- loop counter, reg 0 should be 00
22 24 LOAD BIT PATTERN
23 FF <- -1
24 25 LOAD BIT PATTERN
25 C8 <- turtle forward move length
26 26 LOAD BIT PATTERN
27 3C <- turtle right turn angle

28 B3 JUMP <- loop head
29 38 <- address after loop
2A 35 STORE <- loop body
2B 02
2C 36 STORE
2D 04
2E 21 LOAD BIT PATTERN <- calling hexagon function
2F 34 <- return address
30 22 LOAD BIT PATTERN
31 64
32 B0 JUMP
33 EA

34 53 ADD <- decrement loop, <- loop tail
35 43
36 B0 JUMP
37 28 <- address to loop head
38 C0 HALT <- after loop
39 00

#HEXAGON FUNCTION, writes to registers C, D, E, and F
#arguments: register 1, register 2
#address: EA

#this function draws an hexagon then jumps to the address in register 01
#hexagon side length is determined by register 02
#set a register 1 to a return address then jump to EA to use this function

#init
EA 2C LOAD BIT PATTERN <- HEXAGON FUNCTION BEGINNING
EB FF
EC 2D LOAD BIT PATTERN
ED 06
EE 40 MOVE
EF 2E
F0 2F LOAD BIT PATTERN
F1 3c

#init loop counter
#makes sure that adding -1 to reg D 6 times will result in reg 0 == reg D
#regardless of the value in reg 0
F2 5D ADD
F3 0D

#init return address
F4 31 STORE <- set return address
F5 F7

#loop
F6 BD JUMP <- beginning of loop
F7 00 <- return address goes here, (meant to be overwritten)

#loop body
#move turtle forward then turn
F8 3E STORE <- loop body
F9 02
FA 3F STORE
FB 04

#FF is in register C, which is -1 in two's complement 8 bits
FC 5D ADD <- decrement loop
FD CD
FE B0 JUMP <- jump back to beginning of loop
FF F6 <- HEXAGON FUNCTION END
